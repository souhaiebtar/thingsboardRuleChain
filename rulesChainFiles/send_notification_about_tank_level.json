{
  "ruleChain": {
    "additionalInfo": null,
    "name": "send Notification about tank level",
    "firstRuleNodeId": null,
    "root": false,
    "debugMode": true,
    "configuration": null
  },
  "metadata": {
    "firstNodeIndex": 3,
    "nodes": [
      {
        "additionalInfo": {
          "layoutX": 308,
          "layoutY": 60
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetAttributesNode",
        "name": "get Shared Attribute",
        "debugMode": false,
        "configuration": {
          "clientAttributeNames": [],
          "sharedAttributeNames": [
            "notificationToken",
            "minimumValue",
            "tanks_barometer",
            "tanks_array_of_name_type_and",
            "notificationForMinimumValueSent"
          ],
          "serverAttributeNames": [],
          "latestTsKeyNames": []
        }
      },
      {
        "additionalInfo": {
          "layoutX": 563,
          "layoutY": 23
        },
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "IF ONE OF THE TANKS HAS A VALUE INFERIOR TO MINIMUMVALUE IN SHAREDATTRIBUTE, send a valid message",
        "debugMode": true,
        "configuration": {
          "jsScript": "var removeTanksThatReceivedNotification = function(tanksNameArray, indexForTanksThatReceivedNotificationString) {\n    var indexInvalidArray = indexForTanksThatReceivedNotificationString.split(',').filter(Boolean);\n    \n    var tanksOk = [];\n    var arrayLength = tanksNameArray.length;\n    for(var i = 0; i < arrayLength; i+=1){\n        if(indexInvalidArray.indexOf(tanksNameArray[i].substr(-1)) == -1) {\n            tanksOk.push(tanksNameArray[i])\n        }\n    }\n    \n    return tanksOk;\n    \n}\n\nvar ExpoNotificationMessage = function(to, title, body, data) {\n  this.to = to;\n  this.title = title;\n  this.body = body;\n  this.data = JSON.stringify(data);\n};\n\nvar getExpoTokenArray = function(expoToken) {\n  // START: parse the attribute that contain the token\n  // used for the notification\n  var expoTokenArray = [];\n  if (expoToken) expoTokenArray = expoToken.split(\",,\").filter(Boolean);\n  // END\n  return expoTokenArray;\n};\n\nvar createExpoMessage = function(expoTokensArray, message, messageProb,minimumValue) {\n  var msg = [];\n  var indexForTanksWIthMinimum = message;\n\n\tif(message) {\n    messageProb = messageProb ? \" also there is a problem with the probs \" + messageProb : \"\";\n    message = 'sorry but tanks '+ message+ ' contain less than ' + minimumValue + \"% \" + messageProb;\n\t} else {\n    message = 'sorry but there is a problem with  probs in ' + messageProb;\n  }\n  for (var i = 0; i < expoTokensArray.length; i += 1) {\n    msg.push(\n      new ExpoNotificationMessage(\n        \"ExponentPushToken[\" + expoTokensArray[i] + \"]\",\n        \"Hello\",\n        message,\n        {'devicesId': metadata.deviceId, 'indexForTanksWIthMinimum': indexForTanksWIthMinimum}\n      )\n    );\n  }\n  return msg;\n};\n\n// parse tanksBarometer\nvar expoTokenArray = getExpoTokenArray(metadata.shared_notificationToken);\nvar tanksBarometerArray = JSON.parse(metadata.shared_tanks_barometer);\nvar minimumValue = metadata.shared_minimumValue;\n\n\nvar tanksName = [\"tank1\", \"tank2\", \"tank3\", \"tank4\", \"tank5\"];\n\n\nvar voltageName = [\"voltage1\", \"voltage2\", \"voltage3\", \"voltage4\", \"voltage5\"];\nvar voltageNameLength = voltageName.length;\n\n// check msg properties (names included in voltageName array) which have values less than 0.5 and return an array which contain all their index\nvar validTankName = [];\nvar inValidTankName = [];\nfor(var i = 0; i < voltageNameLength; i++) {\n\tif(msg[voltageName[i]] && Number(msg[voltageName[i]]) > 0.5) {\n    validTankName.push(tanksName[i]);\n  }\n\telse {\n    inValidTankName.push(tanksName[i]);\n  }\n\n\t//create a new array which contain list of tankname for which voltage > 0.5\n}\n\n\n// get property key of the msg, it should be the same as\n// Object.keys(msg)(case where msg contain only tank property)\n\n\n\nif( metadata.shared_notificationForMinimumValueSent ) {\ntanksName = removeTanksThatReceivedNotification(validTankName, metadata.shared_notificationForMinimumValueSent);\n}else{\n   tanksName = validTankName; \n}\nif (tanksName.length) {\n  // get msgIntegerPartArray (array which contain the integer part of every msg property)\n  // also get tankIndex, [0,1,2,3,4] which gonna be used to get the correct\n  //barometer array from tanksBarometerArray\n  var msgIntegerPartArray = [];\n  var tankIndex = [];\n  for (var i = 0; i < tanksName.length; i += 1) {\n    msgIntegerPartArray.push(~~Number(msg[tanksName[i]]));\n    tankIndex.push(Number(tanksName[i].substr(-1)) - 1);\n  }\n\n  // calculate pourcentage for every tank\n  var pourcentagesArray = [];\n  for (var i = 0; i < msgIntegerPartArray.length; i += 1) {\n    pourcentagesArray.push(\n      tanksBarometerArray[tankIndex[i]][msgIntegerPartArray[i]] /\n        tanksBarometerArray[tankIndex[i]][\n          tanksBarometerArray[tankIndex[i]].length - 1\n        ]\n    );\n  }\n\n  // minimum Pourcentage, gotten from shared attribute\n\n  if (minimumValue && expoTokenArray.length && pourcentagesArray.length) {\n    var pourcentagesArrayLength = pourcentagesArray.length;\n    var messageToAppendInNotification = \"\",\n      msg = \"\";\n\n    for (var i = 0; i < pourcentagesArrayLength; i++) {\n      if (pourcentagesArray[i] < minimumValue / 100) {\n        messageToAppendInNotification += (tankIndex[i] + 1) + \" \";\n      }\n\t\t}\n\t\t\n\t\tvar messageAboutDeviceProblem = '';\n\t\tif (inValidTankName.length) {\n\t\t\tmessageAboutDeviceProblem = inValidTankName.join(' ');\n\t\t}\n\n    if (messageToAppendInNotification || messageAboutDeviceProblem)\n      msg = createExpoMessage(expoTokenArray, messageToAppendInNotification, messageAboutDeviceProblem, minimumValue);\n\n    return { msg: msg, metadata: metadata, msgType: msgType };\n  }\n} else if (inValidTankName.length) {\n\n\tvar messageAboutDeviceProblem = inValidTankName.join(' ');\n\n\tif(messageAboutDeviceProblem) {\n\t\tmsg = createExpoMessage(expoTokenArray, '', messageAboutDeviceProblem,'');\n\t}\n\n\treturn { msg: msg, metadata: metadata, msgType: msgType };\n\n}\n\nreturn false;\n"
        }
      },
      {
        "additionalInfo": {
          "layoutX": 592,
          "layoutY": 288
        },
        "type": "org.thingsboard.rule.engine.rest.TbRestApiCallNode",
        "name": "send a message to the expo notification api",
        "debugMode": false,
        "configuration": {
          "restEndpointUrlPattern": "https://exp.host/--/api/v2/push/send",
          "requestMethod": "POST",
          "headers": {
            "host": "exp.host",
            "accept": "application/json",
            "accept-encoding": "gzip,deflate",
            "content-type": "application/json"
          }
        }
      },
      {
        "additionalInfo": {
          "layoutX": 236,
          "layoutY": 311
        },
        "type": "org.thingsboard.rule.engine.metadata.TbGetOriginatorFieldsNode",
        "name": "test",
        "debugMode": true,
        "configuration": {
          "fieldsMapping": {
            "name": "deviceName",
            "type": "originatorType",
            "id": "deviceId"
          }
        }
      }
    ],
    "connections": [
      {
        "fromIndex": 0,
        "toIndex": 1,
        "type": "Success"
      },
      {
        "fromIndex": 1,
        "toIndex": 2,
        "type": "Success"
      },
      {
        "fromIndex": 3,
        "toIndex": 0,
        "type": "Success"
      }
    ],
    "ruleChainConnections": null
  }
}